INDEX

1.0 # DJANGO INSTALLATION 
    1.1 # CREATE VIRTUAL ENVIRONMENT
2.0 # CREATE A DJANGO PROJECT
    2.1 # CREATE A PROJECT  
    2.3 # CREATE DEVELOPMENT AND PRODUCTION ENV 
    2.4 # CREATE A TEMPLATES FOLDER
    2.4 # CREATE A ROOT USER 
3.0 # CREATE A DANJGON APP INSIDE YOUR RPOJECT 
    3.1 # CREATE DJANGO APP
    3.1 # REGISTER DJANGO APP IN PROJECT
    3.2 # UPDATE YOUR APP APPS.PY FILE 
4.0 # ROUTING/VIEWS
    4.1 # CLASS BASED VIEWS 
    4.2 # ADDING VIEW TO MAIN ROUTER 
    4.2 # ACCESSING QUERY DATA / BODY DATA 
    4.3 # RESPONSE TYPES 
5.0 # ROUTING/VIEWS 
    5.1 # CONCEPT OF VIEW 
    5.2 # CREATING A VIEW
    5.3 # MAPPING VIEWS TO MAIN ROUTER
6.0 # DJANGO ORM AND DATABASES
    6.1 # DEFINE A TABLE 
    6.2 # CREATE TABLE IN DATABASE
    6.3 # ADD TABLE TO THE ADMIN CONSOLE 
    6.4 # MANAGE YOUR TABLES 
7.0 # DJANGO MODEL fields 
    7.1 # FIELDS
    7.2 # PRIMARY KEYS 
    7.3 # FOREIGN KEYS 
    7.4 # INDEXES 
8.0 # DJANGO ORM ADVANCED 
    8.1 # CREATING OBJECTS INTO THE DATABASE 
    8.2 # UPDATING VALUES 
    8.3 # RETREIVING DATA 
        8.3.1 # RETREIVE WITH FILTERS
        8.3.2 # RETREIVE ALL  DATA 
        8.3.3 # RETREIVE EXCLUDING DATA 
        8.3.4 # STACKING QUERY SETS 
        8.3.5 # SCAPING LIKE CHARACTER %
        8.3.5 # DELETING OBJECTS
        8.3.5 # PAGINATION
9.0 # DEFYNING RELATIONAL MODELS 
    9.1 # ONE TO ONE RELATION
    9.2 # MANY TO ONE RELATIONS 
    9.3 # MANY TO MANY RELATIONS 


1.0 # DJANGO INSTALLATION 
    
    1.1 # CREATE VIRTUAL ENVIRONMENT

    pip install Django==4.0.2

    **make sure django can be seen by python by activating the python terminal
    and then : 

    import django ; print(django.get_version())

    or in terminal

    python -m django --version

------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------

2.0 # CREATE A DJANGO PROJECT

    2.1 # CREATE A PROJECT  

    run : 
        django-admin startproject mysite

    ** a project folder/container is created .
    ** this is a project , not a an app
    ** a django project can contain many apps
    ** every django project contains at least one app running.
    ** in the project manage.py is a CLI tha can be used to manage your project


    2.2 PROJECT DRESCRIPTION

    ** /mysite: is the actual directory where your app runs
    ** mysite/settings.py: Settings/configuration for this Django project.

                            - INSTALLED APPS : List of the current apps running in you project.
                                                Any new created app must be added to this list.
                            
                            - TEMPLATES : A list containing the settings for all template engines 
                                          to be used with Django --> 'django.template.backends.jinja2.Jinja2'
                            
                            - ROOT_URLCONF: Default root url of the app

                            - MIDDLEWARE: Middleware is a framework of hooks into Django’s 
                                          request/response processing.Each middleware component is responsible for doing 
                                          some specific function.
                            
                            - ALLOWED_HOSTS: A list of strings representing the host/domain names 
                                             that this Django site can serve --> ['.localhost', '127.0.0.1', '[::1]','www.example.com']
                            
                            - DATABASES: A dictionary containing the settings for all databases to be 
                                         used with Django.
                            
                            - STATIC_URL

    ** mysite/urls.py: The URL declarations for this Django project; a “table of contents” of your Django-powered site.
                            
                            - Any url of your apps must be included in this file.

    ** mysite/asgi.py: An entry-point for ASGI-compatible web servers to serve your project.
                            
                            - asgi are asyncronous servers.

    ** mysite/wsgi.py: An entry-point for WSGI-compatible web servers to serve your project.
                            
                            - wsgi  are servers based on workers.

    ** manage.py: A cli to run administration functions in your project like 
                            
                            - python manage.py runserver : start the django server
                            - execute database migration with alembic


    2.3 # CREATE DEVELOPMENT AND PRODUCTION ENV 

        **In you project folder (not your app folder)
        ** create a new folder settings/
        ** create the following files in settings/
          
          - base.py : Contains a copy of the basic configuration in settings.py like 
                        - BASE_DIR 
                        - SECRET KEY 
                        - ALLOWED_HOSTS 
                        - INSTALLED_APPS
                        - MIDDLEWARE
                        - ROOT_URLCONF
                        - TEMPLATES
                        - WSGI_APPLICATION
                        - AUTH_PASSWORD_VALIDATORS
                        - LANGUAGE_CODE = 'en-us'
                        - TIME_ZONE = 'UTC'
                        - USE_I18N = True
                        - USE_TZ = True
                        - STATIC_URL
                        - DEFAULT_AUTO_FIELD

          - dev.py : Contains the configuration used for development. Inherits from base.py 
                        - DEBUG = True
                        - ALLOWED_HOSTS
                        - DATABASES ** We will use differenta databases for dev/prod/testing
                        - STATIC_URL
                        
          - prod.py: Contains the production configuration 
          - test.py: Contains the testing configuration 
          - __init__.py

        ** Eliminate the old settings.py 
        ** Now execute the django server especifying the environment you will use : dev/prod/test in our new settings/ folder :

            sintaxis :

            python manage.py runserver --settings=project_folder.settings_folder.env_file

            
            example:
            
            python manage.py runserver --settings=mysite.settings.dev


        **We can also set the default configuration of django in the manage.py file at : 

            os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'mysite.settings')  (old config)
            |
            |--> os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'mysite.settings.dev')  (new config for development)


    2.4 # CREATE A TEMPLATES FOLDER

        **In your project folder create a templates/ folder.
        **This folder will store the html files of each of your apps.

        example : 

            my_site/
                setting/
                templates/
                asgi.py
                wsgi.py
                urls.py
        
        **Inside the folder templates/ create a subfolder for each app in your project.
        **Store inside the subfolder the html files belonging to each app 

        example : 

            my_site/
                setting/
                templates/
                    my_app/
                        index.html
                asgi.py
                wsgi.py
                urls.py

        ** In order to make this architecure effective the localtion of templates/
        mus be specified in the new settings/base.py 
        ** Add path of the new folder templates/ to the templates path

        example :

            setting/base.py 


         TEMPLATES = [
            {
            'BACKEND': 'django.template.backends.django.DjangoTemplates',
            'DIRS': [BASE_DIR / 'templates'],
            'APP_DIRS': True,
            'OPTIONS': {
        
        **BASE_DIR : Is the root location of your project folder.
                    BASE_DIR / 'templates' is telling your templates will be 
                    stored in the folder templates/ inside you project folder 

        **Now whenever you render a template you must use as prefix you app template folder 

        example :
            
            my_site/
                setting/
                templates/
                    my_app/
                        index.html

            class HomeView(View):
                template_name= "my_app/index.html"

                def get(self,request):
                    return render(request,self.template_name)

    2.4 # CREATE A ROOT USER 

        **Create the root user of your project:
        **Requires to make the first migration

            python manage.py createsuperuser



--------------------------------------------------------------------------------------


--------------------------------------------------------------------------------------

3.0 # CREATE A DANJGON APP INSIDE YOUR RPOJECT 

    3.1 # CREATE DJANGO APP

    sintaxis:
        python manage.py startapp <app_name>
    
    example : 
        **create a folder where we will store our applications called applications.
        **do not use the word apps since is reserved for django
        **create init file
        ** create your first app inside our applications/ folder

            /applications
            /applications/__init__.py
            cd applications/

            django-admin startapp my_app
    
    ** This will create an app inside your project 
    ** Your app as the following structure:

        - admin.py: Allows you to administrate the metadata of your database models.
        - apps.py:
        - modesl.py: Your database models.  
        - tests.py: Your app tests
        - views.py:
        - migrations/:

    3.1 # REGISTER DJANGO APP IN PROJECT

        ** Each app created needs to be added to your base settings file into INSTALLED_APPS 
        ** Currently our base settings are in the file settings/base.py of our project
        ** Register you new app in INSTALLED_APPS --> 'applications.my_app.apps',

        example:

            INSTALLED_APPS = [
            'django.contrib.admin',
            'django.contrib.auth',
            'django.contrib.contenttypes',
            'django.contrib.sessions',
            'django.contrib.messages',
            'django.contrib.staticfiles',
            'applications.my_app',
            ]


    3.2 # UPDATE YOUR APP APPS.PY FILE 

        ** In applications/my_app/
        ** In order for django to find your app in the folder applications we must 
           modify the apps.py file in each app .
        ** Add the applications/ folder name to your app name:

        example : **originally when the app is created 

            class DepartamentoConfig(AppConfig):
                default_auto_field = 'django.db.models.BigAutoField'
                name = 'my_app'  ** ---> change to --> name = 'applications.my_app'
        
        example:

            class DepartamentoConfig(AppConfig):
                default_auto_field = 'django.db.models.BigAutoField'
                name = 'applications.my_app'

-----------------------------------------------------------------------------------------------------


-----------------------------------------------------------------------------------------------------

4.0 # ROUTING/VIEWS

    4.1 # CLASS BASED VIEWS 

        **The concept of class based view is :

            - A class that inherits from the class View 
            - the class methods correspond to http request method 
                - get()
                - post()
                - put()
            - The class is passed to the main router as whole wiht the method as_view()
        
        example :

            /app/views  **In our app 

            from django.views import View

            class MyView(View):

                def get(request:HttpRequest,*args,**kwargs):
                    ...

                def post(request:HttpRequest,*args,**kwargs):
                    ...

    4.2 # ADDING VIEW TO MAIN ROUTER 

            **Once the view in the previous example is created we add it 
            the project router :

        example: **project folder 

            /my_site/  
                urls.py

            from applications.my_app.views import MyView


            urlpatterns = [
                path('admin/', admin.site.urls),
                path('index/',MyView.as_view()),
            ]

            **Now our view is linked to the router of our project


    4.2 # ACCESSING QUERY DATA / BODY DATA 
        
        **Accessing queries data and json data in request

        example : GET 

            ** getting headers :

                request.headers 
            
            ** method type 

                request.method
            
            **query params 

                request.GET.get("param_name","")
            
        example : POST 

            **getting json data :

                payload = json.loads(request.body)

    4.3 # RESPONSE TYPES 

        - Response using the HttpResponse object 

            - does not support json 
            - responses are in plain text 

            example :

                response = HttpResponse()
                response.headers={"Content-Type":"text/plain"}
                response.status_code=200
                response.content="Hello"
                return response 
        
        - Response using the JsonResponse object 

            - supports json 
            
            example : 
                payload : dict
                JsonResponse(payload,status=201)
---------------------------------------------------------------


---------------------------------------------------------------

5.0 # ROUTING/VIEWS 

    5.1 # CONCEPT OF VIEW 

        **Views are meant to be the rendering of web pages
        **In order to use views we first need to create the folder 
        
            templates/

        **Then add html files to this folder . These will be our views :
        
        my_site/
            setting/  
            templates/ 
                myapp/
                    index.html
                    form.html
                    pages.html 
                    .
                    .
                    .
    
    5.2 # CREATING A VIEW

        **In order to create a view we need :
            - a class that inherits from the View class
            - the class must have a template_name attribute 
            - the value of template_name is an html file in the folder templates/
            - In order to send a template as response we must use the method render
        
        sintaxis:

            return render(request,template,template_args)

        example :

            class IndexView(View):
                template_name = "myapp/index.hmtl"

                def get(self,request):
                    return rende(request,self.template_name,{"template_arg":"value"})

          
    5.3 # MAPPING VIEWS TO MAIN ROUTER

        **In your app folder create an urls.py file 
        **Import all the urls of you app to this file 

        my_app/
            ulrs.py/


        example:

            from django.urls import path 
            from . import views 

            urlpatterns = [
                path("home/",views.HomeView.as_view()),
                path("data/",views.TestView.as_view()),
            ]
        

        **mapp your app urls to the project main router 
        
        mysite/
            urls/
        applications/
            my_app/
                ulrs.py/


        **at mysite/
                urls/

        from django.urls import path,include

        urlpatterns = [
        path('admin/', admin.site.urls),
        path('',include("applications.my_app.urls")),
        ]
--------------------------------------------------------------------


--------------------------------------------------------------------

6.0 # DJANGO ORM AND DATABASES

    **In your app folder my_app in the file models.py define your
    database models 

    my_app/
        model.py

    
    6.1 # DEFINE A TABLE 

        **Define the table test
        **Define the table attributes

        example:

        class Test(models.Model):
            id = AutoField(primary_key=True)
            name = CharField("name",max_length=20,null=False)
            email = EmailField("email",max_length=50,null=False)


    6.2 # CREATE TABLE IN DATABASE

        **In order to create the tables defined by your models 
        execute .
        **This command creates the migrations file that will make changes in your 
        database.

        python manage.py makemigrations

        
        **Apply changes to database once the migration file have been created.

        python  manage.py migrate

    6.3 # ADD TABLE TO THE ADMIN CONSOLE 

        **In your app folder my_app/
        **Add the table classes to your admin.py file.
          This will allow you to interect with the
          tables from the admin user interface
        
        example :

            from .models import Test
            admin.site.register(Test)
    
    6.4 # MANAGE YOUR TABLES 

        ** access your table in the django admin by 
        running the sever :

            python manage.py runserver 

        **access your admin using the /admin/ route in the url

    
    6.5 CREATE A VIEW WITH DATABASE DATA 


        class ModelTestView(View):

            def get(self,request):
                model = Test                          **select model
                template_name = "home/test.html"      ** select template
                query = Test.objects.all()            ** SELECT * FROM Test
                data = query.values()                 ** get values as dict
                              
                context={                             **load data in a context dict
                    "table_items":data
                }

                return render(request,template_name,context)    **render template with data

        
        **create the view test.html in template/

        <h1>Listing elements from a table</h1> 
            {{ table_items }}

            <ul>
            {% for item in table_items %}
                <li>
                <p>{{item.name}}</p>
            </li>
            {%endfor%}
            </ul>

-------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------

7.0 # DJANGO MODEL fields 

    7.1 # FIELDS

        CharField : field made for text
        AutoField : an integer that automatically increments with ids.
        BigAutoField : bigger than AutoField 9223372036854775807
        IntegerField : for intergers 
        BoleanField : True/False 
        DateField : For date data
        DateTimeField: For date data represeted by datetime.datetime
        TestField : Large text field for text areas 
        DecimalField: for decimal numbers.

        choices : is a special field the limits the options of
                data a field can accept 

                example :

                JOB_CHOICES = (
                    ('0','ADMIN'),
                    ('1','USER'),
                    ('2','BANNED')
                )
                job = models.CharField('teletrabajo',max_length='1',choices=JOB_CHOICES)
    
    7.2 # PRIMARY KEYS 
        class Model_A(models.Model):

            attribute_a
            attribute_b
            job = models.CharField('teletrabajo',max_length='1',primary_key=True)

    7.3 # FOREIGN KEYS 

        class Model_A(models.Model):

                attribute_a
                attribute_b
                job = models.ForeignKey(Other_model)
        
    7.4 # INDEXES 

        **increase the performace of your database by creating indexes 

        Class Modle_A(models.Model)

            attribute_a
            attribute_b

            class Meta:
                indexes = [
                    models.Index(fields=['attribute_a', 'attribute_b']),
                    models.Index(fields=['attribute_a'], name='attribute_a_idx'),
                    models.Index(fields=['attribute_b'], name='attribute_a_idx')
                ]


            ** models.Index(fields=['attribute_a', 'attribute_a'])
            ** This index improves searches using both attribute_a' and 'attribute_b
            ** This does not improves searches  using attribute_a' or 'attribute_b
               alone

            ** For that reasons additional indexes for 'attribute_a', 'attribute_b'
            must be created
            



-----------------------------------------------------------------------------------------


-----------------------------------------------------------------------------------------

8.0 # DJANGO ORM ADVANCED 

    8.1 # CREATING OBJECTS INTO THE DATABASE 

        sintaxis :

            m = Model_name(table_item = "item_value )
            m.save()

        example :

            b = Blog(name='Beatles Blog', tagline='All the latest Beatles news.')
            b.save()

        **This is the quievalent of an INSERT operation
        **m.save is the same as a mysql commit

    8.2 # UPDATING VALUES 

        **Get an object from the database 
        **update object property 
        **save 

        example :
            b = Model_name.get(id=2)
            b.name = "new name" 
            b.save()
        
        **This is the equivalent of an update


    8.3 # RETREIVING DATA 

        8.3.1 # RETREIVE WITH FILTERS

            object = Blog.objects.filter(name="robin")

            or 

            object = Blog.objects.get(name="Robin")

            ** filter returns n results
            ** get can only return 1 result if exists.
               If not exists then raises a DoesNotExists exception

        8.3.2 # RETREIVE ALL  DATA 

            object = Blog.objects.all().filter(date=2006)

        8.3.3 # RETREIVE EXCLUDING DATA 

            object = Blow.objects.exclude(date = datetime.dateime.toda()).filter(date = datetime.date(2006,1,20))

        8.3.4 # STACKING QUERY SETS 

            **Each query set you stack produces a more refined query 
            **query sets are lazy . This only generates queries , does not execute them
            in the database.
            **The query is only executed in the database on print(query3)

            query1 = Blog.objects.filter(name="Robin")
            query2 = query1.exclude(name="Osbald")
            query3 = query2.filter(date=datetime.date.today())

            print(query3) **database activity only happends here 
            values = query3.values()  ** or here


        8.3.5 # SCAPING LIKE CHARACTER %

            Entry.objects.filter(headline__contains='%Ro%')

            **SELECT ... WHERE headline LIKE '%Ro%';

        

        8.3.5 # DELETING OBJECTS

            e.delete()

            or 

            Entry.objects.filter(pub_date__year=2005).delete()

            or 

            Entry.objects.all().delete(

            **returns an int with the number of objects deleted


        8.3.5 # PAGINATION

            Entry.objects.all()[5:10]

            **returns from index 5 - 10

-------------------------------------------------------------------------------------



--------------------------------------------------------------------------------------

9.0 # DEFYNING RELATIONAL MODELS 

    9.1 # ONE TO ONE RELATION

        **A one to one relations is not the same as a foreign key.
        **One to one emplies that there can only be 1 a for 1 b 
        so there is an implicit "unique" constraint.

        sintaxis :

            class Model_A(models.Model):

                attribute_a
                attribute_b
            

            class Model_B(models.Model):

                attribute_a
                attribute_b
                attribute_c = models.OneToOneField(
                    Model_A,
                    on_delete=models.CASCADE 
                    primary_key=True
                )
        

            **Inserting data 

            a = Model_A(name='Demon Dogs', address='944 W. Fullerton')
            b = Model_B(attribute_c=a)
            b.save()

            **Querying 

            r = Model_B.objects.filter(attribute_c="something)

    9.2 # MANY TO ONE RELATIONS 

        sintaxis:

            class Model_A(models.Model):

                attribute_a
                attribute_b
                attribute_c
            
            class Model_B(models.Model):

                attribute_a = models.ForeignKey(Model_A,on_delete=models.CASCADE)
                attribute_b
                attribute_c

            ***Inserting data 

                r = Model_A(first_name='John')
                r.save()

                a = Article(id=None, attribute_a=r)
                a.save()

    9.3 # MANY TO MANY RELATIONS 


        sintaxis : 

            class Model_A(models.Model):

                attribute_a
                attribute_b
                attribute_c
            
            class Model_B(models.Model):

                attribute_a = models.ManyToMany(Model_A)
                attribute_b
                attribute_c

            **In ManyToMany the models need to be saved first 
            before creating the relations :

            a=Model_A(attribute_a="something"...)
            a.save()
            b=Model_A(attribute_a="something"...)
            b.save()
            c=Model_A(attribute_a="something"...)
            c.save()

            r =Model_B()
            r.save()

            a.attribute_a.add(a)
            a.attribute_a.add(b)
            a.attribute_a.add(c)


10 # INSTALLING POSTGRESQL IN DJANGO

    ** Install posgresql in your system or in container 
    ** Create an user 
    ** Create a database 
    
    Change you djago configuration file to access posgresql 

    DATABASES = {
    'default': {
            'ENGINE': 'django.db.backends.postgresql_psycopg2',
            'NAME': 'database_name',
            'USER': 'user_name',
            'PASSWORD': 'your_password',
            'HOST': 'localhost',
            'PORT': '5432',
        }
    }


-------------------------------------------------------------------------------------



--------------------------------------------------------------------------------------

11 # DJANGO CACHE 

    11.1 # INSTALLATION
        **In order to create user sessions we must first enable a place 
        to store our session data . We have tow options :

            - storage in cache 
            - strage in a database 

        For storage in cache install: 

            pip install pymemcache

    11.2 # ADD CACHE LIB TO DJANGO 

        CACHES = {
            'default': {
            'BACKEND': 'django.core.cache.backends.memcached.PyMemcacheCache',
            'LOCATION': '127.0.0.1:8000',
            }
        }

        ** You can have many memcahche instances 
        ** One excellent feature of Memcached is its ability to 
           share a cache over multiple servers. This means you can 
           run Memcached daemons on multiple machines, and the program will 
           treat the group of machines as a single cache.
        
        CACHES = {
            'default': {
            'BACKEND': 'django.core.cache.backends.memcached.PyMemcacheCache',
            'LOCATION': [
                '172.19.26.240:11211',
                '172.19.26.242:11212',
                '172.19.26.244:11213',
                ]
            }
        }

        ** meme cache can accept a few options  to alter its behavior 

        CACHES = {
        'default': {
            'BACKEND': 'django.core.cache.backends.memcached.PyMemcacheCache',
            'LOCATION': '127.0.0.1:11211',
            'OPTIONS': {
                'no_delay': True,
                'ignore_exc': True,
                'max_pool_size': 4,
                'use_pooling': True,
                }
            }
        }
        

        **You can specify other chache instances and tag them :

        CACHES = {
            'default': {
            'BACKEND': 'django.core.cache.backends.memcached.PyMemcacheCache',
            'LOCATION': [
                '172.19.26.240:11211',
                '172.19.26.242:11212',
                '172.19.26.244:11213',
                ]
            },
            'special_chache': {
            'BACKEND': 'django.core.cache.backends.memcached.PyMemcacheCache',
            'LOCATION': [
                '0.0.0.0:10000',
                ]
            }
        }

        11.2.1 # USING FILE CACHE INSTEAD 

            **storing chace in a file instead of a server instance:

            CACHES = {
                'default': {
                    'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',
                    'LOCATION': '/var/tmp/django_cache',
                }
            }
        
        11.2.2 # USING LOCAL MEMORY INSTEAD 

            ** Storing cache ins sytem memory  instead.
            ** LOCATION in this case is just a tag for the memory area used.
            ** You can create and tag many areas for different caches .
            ** This system is very fast but chache will be deleted if the server crashes

            CACHES = {
            'default': {
                'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
                'LOCATION': 'unique-snowflake',
            }
        }


    11.3 # USING THE CACHE LIB IN VIEWS

        **This will cache the response of the 
        view for 15 minutes
    
        from django.views.decorators.cache import cache_page

        @cache_page(60 * 15)
        def my_view(request):

    11.4 # SELECTING AN SPECIFIC CACHE 

        from django.views.decorators.cache import cache_page
        @cache_page(60 * 15,cache="special_cache")
        def my_view(request):

    11.5 # SPECIFYING CACHE IN URLS 

        from django.views.decorators.cache import cache_page

        urlpatterns = [
            path('foo/<int:code>/', cache_page(60 * 15)(my_view)),
        ]


    11.6 CACHE TEMPLATE FRAGMENTS 

        {% load cache %}
        {% cache 500 sidebar %}
            .. sidebar ..
        {% endcache %}

        ** This template will be displayed and stored in cache for 500 seconds

    
    11.7 # BASIC CAchE USAGE 

        from django.core.cache import cache

        sintaxis:

            cache.set('key','value',timeout)
        
        **to add a key ONLY 

        example:

            cache.set('my_key', 'hello, world!', 30)

        **getting values :

            cache.get('key')

            or

            cache['key']


12 #  DJANGO SESSION 

    12.1 #  CREATING sessions

        **In order to create session you first need to configure 
        a CACHE engine. Check the previous point for more details. 

        **If a cache engine have been created then we can proceed to create a 
        session engine in settings.py or dev.py 

        SESSION_ENGINE="django.contrib.sessions.backends.cache"

        **login

        def login(request):
            m = Member.objects.get(username=request.POST['username'])
            if m.check_password(request.POST['password']):
                request.session['member_id'] = m.id
                return HttpResponse("You're logged in.")
            else:
                return HttpResponse("Your username and password didn't match.")

        **logout

        def logout(request):
            try:
                del request.session['member_id']
            except KeyError:
                pass
            return HttpResponse("You're logged out.")

    
    12.2 # CLEARING SESSION DATA 

        **Session data tends to accumulate.
        **It is important to delete this data regularly .

        ** Use the command :

            django-admin clearsessions 

        ** ... in order to purge session data.

        It is possible to make this type of tasks with a CRON JOB 


13.0 # CRON JOBS 

    13.1 # CONCEPT
        ** cron jobs are tasks triggered automatically at certain schedule or time like
        for instance deleting session data.

    13.2 # INSTALLATION 

        pip install django-crontab

        **in settings.py or base.py

        INSTALLED_APPS = [
            'django_crontab',
            ...
        ]

        **define your cron tasks 
        **This is a task run every five minutes
        ** each '*' represents a time unit

        1- Minute (0 – 59)
        2- Hour (0 – 23)
        3- Day of the month(1 – 31)
        4- Month (1 – 12)
        5- Week day (0 – 6)

        CRONJOBS = [
            ('*/5 * * * *', 'applications.myapp.cron.my_scheduled_job')
        ]

        **define arguments for your cron tasks.
        CRONJOBS = [
            ('*/5 * * * *', 'applications.myapp.cron.my_scheduled_job', ['arg1', 'arg2'], {'verbose': 0}),
        ]

    13.3 # APPLICATIONS

        **In your application at 

        applications/
                    myapp/
                        cron.py 

        **define the task 

        def my_scheduled_job(*args,**kwargs):
            pass

    13.4 # ENABLE THE CRONT JOBS 

        python manage.py crontab add

    13.4 # SHOW CRON JOBS RUNNING 

        python manage.py crontab show

    13.5 # DISABLE CRON JOBS 

        python manage.py crontab remove

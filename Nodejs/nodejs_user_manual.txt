INDEX

## NODE JS USER MANUAL
0.0 # NODE REF MANUAL
1.0 # NODE JS INSTALLATION
2.0 # INSTALLING SPECIFIC NODE VERSION Nvm 
3.0 # CREATE NODE PROJECT 
4.0 # INSTALL DEPPENDENCIES 
5.0 # CREATE NODEJS CONFIGURATION  
    5.0 # INSTALL CONFIG LIBRARY
    5.1 #  CREATE PROJECT LAYOUT
    5.2 # LOAD DEFAULT CONFIGURATION
    5.3 # USE THE CONFIG DATA
6.0 # USING .ENV FILES
    6.1 # BASIC USE OF DOTENV
    6.2 # STORING .ENV FIELS IN A FOLDER 
7.0 # PREPARE THE NODE APP TO LAUCH 
    7.1 # APPLICATION SETUP
            #!/usr/bin/env node
    7.2 # Enable app auto restart
    7.3 # Run your application with autorestart (for development only) 
8.0 # SCRIPTS 
9.0 # NODE IMPORT SYSTEM
    9.1 # ES IMPORT SYSTEM :
    9.2 # NODEJS IMPORT SYSTEM :
10.0 # BASIC HTTP SERVER (WITH EXPRESS)
    10.1 # METHODS 
    10.2 # THE REQUEST OBJECT 
        https://expressjs.com/en/api.html#req
    10.3 # THE RESPONSE OBJECT
        https://expressjs.com/en/api.html#res.app
    10.4 # ROUTER 
11.0 # SENDING HTTP REQUEST
    11.1 # SENDING HTTP WITH AJAX
    11.2 # USING HTTP 
    11.3 # USING HTTPS 
    11.4 # WITH OPTIONS
12.0 # READING FILES 
    12.1 # BASIC USE
    12.3 # READING FILE ASYNC
    12.3 # USING FILE DESCRIPTOR (ASYNC)
    12.4 #  WRITTING FILE (ASYNC)
    12.5 # APPEND TO FILE 
13.0 # PROMISES/ASYNC AWAIT
    13.1 # PROMISES
    13.2 # MODERN ASYCN AWAIT 
14.0 # EVENT EMITERS
15.0 # NODE JS BUFFERS 
16.0 # NODE STREAMS 
17.0 # CREATE A READABLE STREAMS
18.0 # READABLE AND WRITETABLE STREAM 
19.0 # CLASSES
    **private methods use #
        #private_class_method(){
20.0 # SCHEMA VALIDATION
20.1 # TEMPLATE ENGINE 



## NODE JS USER MANUAL


0.0 # NODE REF MANUAL

    https://nodejs.org/docs/latest-v17.x/api/

----------------------------------------------------------------------------------------------------------


----------------------------------------------------------------------------------------------------------

1.0 # NODE JS INSTALLATION

    ** Linux Ubuntu uninstall current node js 
        sudo apt-get purge --auto-remove nodejs
        sudo rm -r /etc/apt/sources.list.d/nodesource.list
        
    ** Linux  Ubuntu installation

        curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
        sudo apt-get install -y nodejs
    
    ** Test the installaton is working 
        sudo node --version
        curl -fsSL https://deb.nodesource.com/test | bash -

----------------------------------------------------------------------------------------------------------


----------------------------------------------------------------------------------------------------------

2.0 # INSTALLING SPECIFIC NODE VERSION Nvm 

    - Nvm is a nodejs version manager in case you need to deal with 
      code made in older versions o node js.
    - It is advisable to install from nvm if you want to use node without root
    privileges

    **Install/upgrade nvm 

        curl https://raw.githubusercontent.com/creationix/nvm/master/install.sh | bash 
        source ~/.bashrc
    
    **Test the installation

        command -v nvm
        nvm --version
    
    **Install an specific version of nodejs

        nvm install _version_number_here 

        example : nvm install 16.3.0
    
    **List of available versions of nodejs

        nvm ls-remote
    
    **Use the installed version 

        nvm use node

    **Uninstall nvm

        rm -rf "$NVM_DIR"

----------------------------------------------------------------------------------------------------------


----------------------------------------------------------------------------------------------------------

3.0 # CREATE NODE PROJECT 

    **initialize and create a project

    npm init project_name project_folder
    
    example :

        npm init myapp ./app

        or 

        npm init

----------------------------------------------------------------------------------------------------------


----------------------------------------------------------------------------------------------------------

4.0 # INSTALL DEPPENDENCIES 

    **npm manages downloads of dependencies of your project.

        npm install 

    **install a single package 

        npm install pacakge_name 
        
        options :
        --save : The packages will appear in your deppendencies
        --save-dev : installs and adds the entry to the package.json file devDependencies
        --no-save : installs but does not add the entry to the package.json file dependencies
        --save-optional : installs and adds the entry to the package.json file optionalDependencies
        --no-optional : will prevent optional dependencies from being installed
    
        sintaxis:

            npm instal package_name <option> 

        example:

            npm install config --save

    **update pacakages

        npm update

    **update specific pacakage

        npm update <package-name>

    
    **run scripts / tasks 

        npm run <task-name>

        //in package json 

            {
            "scripts": {
                "start-dev": "node lib/server-development",
                "start": "node lib/server-production"
            }
        }

    ** the package.json is a manifest with metainformation of your project
    ** the package-lock.json is a file is to keep track of the exact version of 
        every package that is

    **show the version of the current packages 
    npm list 

    **unistall a package 

    npm uninstall -g <package-name>

----------------------------------------------------------------------------------------------------------


----------------------------------------------------------------------------------------------------------

5.0 # CREATE NODEJS CONFIGURATION  

    5.0 # INSTALL CONFIG LIBRARY

        npm install config
    
    5.1 #  CREATE PROJECT LAYOUT

        **Create the following structure 

        settings/
            default.json
            dev.json 
            prod.json 
            test.json
        
        **The content of default.json  :

        {   
            "server":{
                "host":"localhost",
                "port":8000,
                "secret":""
            },
        }

        **Default will be your basic configuration files. 
        **The other files extend from default.json
    
    5.2 # LOAD DEFAULT CONFIGURATION

        **The loaded configuration file deppends of the value of the environment variable NODE_ENV

            if export NODE_ENV=prod this will load prod.json 
            if export NODE_ENV=dev this  will load dev.json etc

        **If no value is used the it will load default.json
        **The name of the folder and the files is relevant

    5.3 # USE THE CONFIG DATA

        const config = require('config'); 

        const port = config.get('server.port');
        const host = config.get('server.host');

----------------------------------------------------------------------------------------------------------


----------------------------------------------------------------------------------------------------------  

6.0 # USING .ENV FILES

    6.1 # BASIC USE OF DOTENV

        **install the dotenv  pacakage

            npm install dotenv --save
        
        **create a .env file 

            USER_ID="239482"
            USER_KEY="foobar"
            NODE_ENV="development"

        ** load the environment variables.
        example :
        
        **in your server sart file index.js 
        **now the variables in you .env files are present in your environment 


            require('dotenv').config();

            process.env.USER_ID; // "239482"
            process.env.USER_KEY; // "foobar"
            process.env.NODE_ENV; // "development"

    6.2 # STORING .ENV FIELS IN A FOLDER 

        **use the path option

            require('dotenv').config({ path: '/custom/path/to/.env' })

        **use the global model.filename to get the path of the current file


            const ROOT_DIR = module.filename


----------------------------------------------------------------------------------------------------------


----------------------------------------------------------------------------------------------------------  


7.0 # PREPARE THE NODE APP TO LAUCH 

    7.1 # APPLICATION SETUP

        **There are 2 recommended pacakges for nodejs 

            - express : Makes the task of settup backend app more agile.

                npm install express 

            - nodemond : Allows automatic reload of your node server. (usefull for development)

        **Add to you index file a shebang 

            #!/usr/bin/env node
            // your code

        **Add permisions (OPTIONAL)

            chmod u+x index.js.js

        **If you create your project using npm init the entry point of your app is index.js 
        **To run your app use:
            
            node index

    7.2 # Enable app auto restart

            npm i -g nodemon 
    
            or

            npm i --save-dev nodemon
   
    7.3 # Run your application with autorestart (for development only) 

            export NODE_ENV=dev
            nodemon index.js


----------------------------------------------------------------------------------------------------------


----------------------------------------------------------------------------------------------------------  

8.0 # SCRIPTS 

    **When a nodejs project is created several files are created :

    - pakage-lock-json : Loags deppednecies to an specific version.
    - package.json : Record the versions of the installed deppendencies 
                     When running a npm install the deppendencies installed
                     will be those in the package.json

                     The pacakge.json also supports adding cli scripts 
                     to your project.
                     The scripts field in package.json can contain paths to
                     .js files or console scripts in bash
    
    sintaxis:

        npm run-script script_name

        or 

        npm run script_name


    Example of scripts:

        {
        "name": "node_cv",
        "version": "1.0.0",
        "description": "node js cv ",
        "main": "index.js",
        "scripts": {
            "test": "scripts/test.js",
            "install":"scripts/install.js",
            "docker":"docker build -t dufctola/my_docker_image ."
        },...


----------------------------------------------------------------------------------------------------------


----------------------------------------------------------------------------------------------------------  
   
9.0 # NODE IMPORT SYSTEM
    
    **Nodejs supports two systems to import files and packages:

        - nodejs original import system.
            **This is the original system created by nodejs 
            and 
        - ecma-script estandard system or ES.
            **we do not use it

    9.1 # ES IMPORT SYSTEM :

        - modules use the .mjs notation 
        - main files use .js notation

        //addTwo.mjs 

            function AddTwo(number){
                return number+2;
            }
            function AddOne(number){
                return number+1;
            }

            export {
                AddTwo,
                AddOne
            };

        //index.js 

            import objects from './utils/addTwo.mjs';

            console.log(objects.AddTwo(2));
            console.log(objects.AddOne(2));


        **Using {AddTwo} import the function or object itself 
        **Not using {} wraps the import object/function around a object
        **You can use namespaces : import {AddTwo as add} from './utils/addTwo.mjs';

    9.2 # NODEJS IMPORT SYSTEM :

        //car.js 
            const car = {
                brand: 'Ford',
                model: 'Fiesta',
            };
            
            const car2={
                brand: 'Ford',
                model: 'Fiesta',
            };

            **Exporting multiple object 
            module.exports = {
                car;
                car2;
            }

            **exporting one object 
            module.exports=car;

        //index.js

            **Getting objects individually

                const {car,car2} = require('./car');

                const {car} = require('./car');
            
            **Getting object into a single object 

                const cars = require('./car');

                console.log(cars.car);
                console.log(cars.car2);
    
----------------------------------------------------------------------------------------------------------


----------------------------------------------------------------------------------------------------------  

10.0 # BASIC HTTP SERVER (WITH EXPRESS)

    const express = require('express');
    const app = express();

    app.get('/', function(req, res) => {
        res.send('Hi!');
    });

    app.listen(3000,'127.0.0.1', () => console.log('Server ready'));


    ***Express is a framework that uses the http 
    module under the hood, app.listen() returns 
    an instance of http***

    10.1 # METHODS 

        app.get("/",function(req,res){

        })

        app.post("/",function(req,res){

        })

        app.put("/",function(req,res){
            
        })

        app.delete("/",function(req,res){
            
        })
        

        **All methods allowed
        app.all("/",function(req,res){
            
        })

        ** Route handler

        app.route("/home")
            .get(function(req,res){
                res.send("Home_page");
            })
            .post(function(req,res){

            });


    10.2 # THE REQUEST OBJECT 
        https://expressjs.com/en/api.html#req

        app.get("/",function(req,res){

        })

        **properties of req:

            req.headers : js object
            req.headersDictinct : string[]
            req.methods: string
            req.rawHeaders: string[]
            req.statusCode : number
            req.statusMessage: string
            req.url: string 

        **If express.use(json) is enabled then 
        in order to receibe json data you only have to access the body :

            req.body.json_data

    10.3 # THE RESPONSE OBJECT

        https://expressjs.com/en/api.html#res.app

        ** basic response
            app.get("/",function(req,res){
                res.send("OK");
            })

        ** res.status
            app.get("/",function(req,res){
                res.status(200);
                res.send("OK");
            })

        ** render template

            sintaxis:
                res.render(view,local,callback)
            
            example:
                res.render("index")

        ** use the res.locals propeties to define 
           variables used by templates

            res.locals.users ="Robin";
            res.locals.data = "some data";
            res.render("some_view");

        ** use res.append to add values to the http response headers 

            sintaxis:
                res.append("field","value");

            example:

                res.append("Link","some_link/link");
                res.append("warning","user invalid");

        ** download resources

            res.download("/path_/to_/file.pdf");
        
        ** res.end 

            **ends the response quickly without any data 
            res.end();

            or 

            res.status(404).end();

        ** res.json 

            js_object={user:"Robin"};
            res.json(js_object);
            res.send();

    10.4 # ROUTER 

        **Express router 
        **The class express router allows you to create 
          modular route handlers 

        const express = require("express");
        const router = express.Router();

        ** Create a middleware for the router 
        ** Router require at least one middleware
        
        //homes.js
            router.use(function(req,res,next)=>{
                let method=req.method;
                let url=req.url;
                let date=new Date();
                let day=date.getDate();
                let month=date.getMonth()+1;
                let year=date.getFullYear();
                console.log(`${day}/${month}/${year} | ${method} | ${url}`);
                next();
            });

            router.get("/home",function(req,res){
                res.send("home_page");
            });

            module.export={
                router
            };

        //index.js  

            const {homes_router}=require("./homes.js")
            app.use("/homes",homes_router)

            **notice "/homes" will be the prefix for all the rutes in
            the router therefore "/homes/home"
    
----------------------------------------------------------------------------------------------------------


----------------------------------------------------------------------------------------------------------  

11.0 # SENDING HTTP REQUEST

    11.1 # SENDING HTTP WITH AJAX

        const xhr = new XMLHttpRequest();
        xhr.onreadystatechange = () => {
        if (xhr.readyState === 4) {
            xhr.status === 200 ? console.log(xhr.responseText) : console.error('error');
        }
        };
        xhr.open('GET', 'https://yoursite.com');
        xhr.send();

    11.2 # USING HTTP 

        const http = require("http");

        const path="http://google.com";

        http.get(path,function(res){

            //A chunk of data have been received
            res.on("data",function(data){
                if (statu_code !=200){
                error = new Error("Error description string");
                }
            }):

            //The whole response have been received
            res.on("end",function(res){
                json_data=JSON.parse(json_data+data);
            });

            console.log(json_data);

        //an error happened
        }).on("error",function(e){

        })

    11.3 # USING HTTPS 

       const https = require("https");

        const path="http://google.com";

        https.get(path,function(res){

            //A chunk of data have been received
            res.on("data",function(data){
                if (statu_code !=200){
                error = new Error("Error description string");
                }
            }):

            //The whole response have been received
            res.on("end",function(res){
                json_data=JSON.parse(json_data+data);
            });

            console.log(json_data);
            
        //an error happened
        }).on("error",function(e){

        });

    11.4 # WITH OPTIONS

            ** full url = https://whatever.com/todos
            const url="/todos";
            const host_name = whatever.com;
            const r_method="GET";
            const port=443;

            const https = require('https');

            const options = {
            hostname: host_name,
            port: port,
            path: url',
            method: r_method,
            headers: {
                'Content-Type': 'application/json',
                'Content-Length': data.length,
                },
            };

            const req = https.request(options, function(res){
                console.log(`statusCode: ${res.statusCode}`);

                res.on('data', function(d) {
                console.log(d);
                });

                let json_data='';
                res.on('end',function(data){
                    json_data=JSON.parse(json_data+data);
                })
                
            }).on('error', function(error){
                    console.error(error);
            });
    
----------------------------------------------------------------------------------------------------------


----------------------------------------------------------------------------------------------------------  


12.0 # READING FILES 

    12.1 # BASIC USE
        const fs = require('fs');

        fs.readFile('/file.json', (err, data) => {
        if (err) {
            // handle error
            console.log(err);
            return;
        }

    12.3 # READING FILE ASYNC

        const fs = require('fs');
        const util = require('util');

        async function example() {
            const open = util.promisify(fs.open);
            const fd = await open('/Users/joe/test.txt', 'r');
        }

        example();


    12.3 # USING FILE DESCRIPTOR (ASYNC)

        const fs = require('fs/promises');
        
        **filehandle is a file descriptor that can interact withthe open file 

        async function example() {
            let filehandle;
            try {

                if fs.access('/Users/joe/test.txt',fs.F_OK,function(err){
                    if (err){
                        throw "MY_CUSTOM_EXCPTION";
                    }
                });

                filehandle = await fs.open('/Users/joe/test.txt', 'r');
                console.log(filehandle.fd);
                content = await filehandle.readFile({ encoding: 'utf8' }));
                console.log(content);

            catch(err){
                console.log(err);
            } finally {
                await filehandle.close();
            }
        }

        example();

    12.4 #  WRITTING FILE (ASYNC)

        const fs = require('fs/promises');

        async function example() {
            try {
                const content = 'Some content!';
                await fs.writeFile('/Users/joe/test.txt', content);
            } catch (err) {
                console.log(err);
            }
        }
        example();

    12.5 # APPEND TO FILE 

        const fs = require('fs/promises');

        async function example() {
            try {
                const content = 'Some content!';
                await fs.appendFile('/Users/joe/test.txt', content);
            } catch (err) {
                console.log(err);
            }
        }
        example();

    
----------------------------------------------------------------------------------------------------------


----------------------------------------------------------------------------------------------------------  

13.0 # PROMISES/ASYNC AWAIT

    13.1 # PROMISES

        **A promise is commonly defined as a proxy for a value 
        that will eventually become available.
        **Once a promise has been called, it will start in a pending state.
        **Every promise starts with a promise constructor 
        **async / await uses primises in the back 

        sintaxis:

            const p = new Promise((resolve, reject) => {
                if some_condition{
                    resolver(done) //task finished
                }else {
                    reject(wait) //pending task not finished
                }
            });

            return p;

        example:  
            
            **reading a file 

            function getFile(file_path){

                return new Promise((resolve, reject) => {
                        fs.readFile(file_path, (err, data) => {
                            if (err) {
                                reject(err); // calling `reject` will cause the promise to fail with or without the error passed as an argument
                                return; // and we don't want to go any further
                            }
                        resolve(data);
                    });
                });
            };


            **calling the promise

            getFile('/etc/passwd')
            .then(data => console.log(data)) //then is used for the resolve case
            .catch(err => console.error(err)); // catch for the reject case


    13.2 # MODERN ASYCN AWAIT 

        **promises have a lot of boiler plating and thats why async / await was introduced.

        async function do_something(){
            console.log("something");
        }

        result = await do_something()


        **or 

        const aFunction = async () => {
            return 'test';
        };

        const result = await aFunction(alert);

        **or 

        await aFunction(alert)

    13.3 CUNCURRENCY

        **We have several tasks we want to run aynchronously


        example: This code will run on task after the other (not cuncurrency)

            const makeAsync = async () =>{
                const a = await getName("name");
                const b = await getDAta("data");
                return [a,b]
            }

        example: This is a fully cuncurrent async code 

            const makeAsync = async () =>{
                const a =  getName("name");
                const b =  getDAta("data");
                const tasks =  Promise.all([a,b]);
                return tasks;
            }

            makeAsync().then(values);


            ** The return values is an array with each value of each promise
            **Use Promise.all([]) to run cuncurrent tasks.
            **Notice the methods being run are not async/await

    
----------------------------------------------------------------------------------------------------------


----------------------------------------------------------------------------------------------------------  


14.0 # EVENT EMITERS

    **Allows to create/emit gloval events or signals
    accross the app that can be used to build logic 

    example : 

        const EventEmitter = require('events');
        const eventEmitter = new EventEmitter();

        eventEmitter.emit('start'); // an emiter 
        eventEmitter.emit('start', 1, 100); //multiple aguments emiter 

        eventEmitter.on('start', () => { //an event receiver
        console.log('started');
        });

        eventEmitter.on('start', (start, end) => { //multiple aguments receiver 
        console.log(`started from ${start} to ${end}`);
        });


    
----------------------------------------------------------------------------------------------------------


----------------------------------------------------------------------------------------------------------  


15.0 # NODE JS BUFFERS 

    **Buffers in Node js are fix size array that deal with
    binary data , each item in a buffer array is 1 byte of data

    example :

        const byf_string = Buffer.from("Hey")

        **The result of this will be an
        array with each character of the string in ACII 

            console.log(buf[0]); // 72
            console.log(buf[1]); // 101
            console.log(buf[2]); // 121

        **Use console.log(buf.toString()); to get back the string data 

        **Create a buffer and write data in it 

        const buf = Buffer.alloc(4);
        buf.write('Hey!');

        buf[1] = 111; // o in UTF-8 //change the data 

        console.log(buf.toString()); // Hoy! 


    **You also just can initialize a buffer allocating
    a fix amount of memory 

    example

        const buf = Buffer.alloc(1024); //safe allocation
        **allocates 1KB 

        const buf = Buffer.allocUnsafe(1024); //unsafe allocation 
        **faster and unsafer than alloc


----------------------------------------------------------------------------------------------------------


----------------------------------------------------------------------------------------------------------  


16.0 # NODE STREAMS 

    **Node streams allows us to transfer data 
    by chunks instead of all in one go.

    For example when we are reading a file to send
    the data to the front-end .
    If the file is big this may take a while 
    however  if stream it we can transfer the information
    in small parts-

    **They are a way to handle reading/writing files,
    network communications, or 
    any kind of end-to-end information 
    exchange in an efficient way.


    example of a stream sending data from a file :

    const http = require('http');
    const fs = require('fs');

    const server = http.createServer((req, res) => {
        const stream = fs.createReadStream(`${__dirname}/data.txt`);
        stream.pipe(res);
    });
    server.listen(3000);

        **Instead of waiting until the file is fully read, 
        we start streaming it to the HTTP client as soon as we 
        have a chunk of data ready to be sent.

        **The pipe method is what "pipes" or streams the information
        into the response (res) or any other destination.

        **pipes can be chained into multiple destinations

        src.pipe(dest1).pipe(dest2);

    There are four classes of streams:

    Readable: a stream which could be used for read data from it. 
              In other words, its readonly.
    Writable: a stream which could be used for write data to it. 
              It is writeonly.
    Duplex: a stream which can read and write data, basically its a 
            combination of a Readable and Writable stream.
    Transform: a Duplex stream which reads data, transforms the data, 
                and then writes the transformed data in the desired format.

----------------------------------------------------------------------------------------------------------


----------------------------------------------------------------------------------------------------------  


17.0 # CREATE A READABLE STREAMS

    **The name is confusing because a readable steam used
    to send information.
    **create the readable stream object 

    const Stream = require('stream');
    const readableStream = new Stream.Readable({
        read(){},
    });

    **We can send information to that readble stream
    by using the method push 

    readableStream.push('hi!');
    readableStream.push('ho!');

    **notice this stream doesnt have destination since we
    a havent speficied the pipe

    readableStream.pipe();

----------------------------------------------------------------------------------------------------------


----------------------------------------------------------------------------------------------------------  


18.0 # READABLE AND WRITETABLE STREAM 

    **writetable streams are used to receive information

    const Stream = require('stream');
    const readableStream = new Stream.Readable({read() {},});
    const writableStream = new Stream.Writable();

    writableStream._write = (chunk, encoding, next) => {
    console.log(chunk.toString());
    next();
    };

    readableStream.pipe(writableStream);
    //notice the destination of the readble stream is
    the writable stream

    readableStream.push('hi!');
    readableStream.push('ho!');

    ** close / end the stream 
    ** this must be donw always !

    readableStream.on('close', () => writableStream.end());
    writableStream.on('close', () => console.log('ended'));
    readableStream.destroy();

----------------------------------------------------------------------------------------------------------


----------------------------------------------------------------------------------------------------------  


19.0 # CLASSES

    class  class_name {
        constructor (args){
            this.arg=arg 
        }
    }

    const name=new class_name("robin");

    **class inheritance 
    **private methods use #

    class  class_name extends parent_class {
        constructor (parent_arg,arg){
            super(parent_arg);
            this.arg=arg;
        }

        a_method(){

        }

        #private_class_method(){

        }
    }

----------------------------------------------------------------------------------------------------------


----------------------------------------------------------------------------------------------------------  


20.0 # SCHEMA VALIDATION

    **there are several schema validation 
    libraries for requests for nodejs 

    - npm install joi
    
    doc about join here : https://joi.dev/api/?v=17.6.0 

    - npm install --save express-validator

    doc about express validator here https://express-validator.github.io/docs/

20.1 # TEMPLATE ENGINE 

    **For template engines express and nodejs suggest :
        pug : https://www.npmjs.com/package/pug
        handlebars : https://www.npmjs.com/package/handlebars

    **However it is advisable to use 

        nunjucks : https://mozilla.github.io/nunjucks/getting-started.html

    **Since it is almost identical to Jinja2

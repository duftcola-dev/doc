## NODE JS USER MANUAL

# Download node js 

    ** Linux Ubuntu uninstall current node js 
        sudo apt-get purge --auto-remove nodejs
        sudo rm -r /etc/apt/sources.list.d/nodesource.list
        
    ** Linux  Ubuntu installation

        curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
        sudo apt-get install -y nodejs
    
    ** Test the installaton is working 
        sudo node --version
        curl -fsSL https://deb.nodesource.com/test | bash -

# Nvm 

    - Nvm is a nodejs version manager in case you need to deal with 
      code made in older versions o node js.
    - It is advisable to install from nvm if you want to use node without root
    privileges

    **Install/upgrade nvm 

        curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash
    
    **Test the installation

        command -v nvm
        nvm --version
    
    **Install an specific version of nodejs

        nvm install _version_number_here 

        example : nvm install 16.3.0
    
    **List of available versions of nodejs

        nvm ls-remote
    
    **Use the installed version 

        nvm use node

    **Uninstall nvm

        rm -rf "$NVM_DIR"


# Creating a project  / managin deppendencies 

    **initialize and create a project

    npm init project_name project_folder
    
    example :

        npm init myapp ./app

    **npm manages downloads of dependencies of your project.

    npm install 

    **install a single package 

    npm install pacakge_name 

    -- save-dev : installs and adds the entry to the package.json file devDependencies
    -- no-save : installs but does not add the entry to the package.json file dependencies
    -- save-optional : installs and adds the entry to the package.json file optionalDependencies
    -- no-optional : will prevent optional dependencies from being installed

    **update pacakages

    npm update

    **update specific pacakage

    npm update <package-name>

    
    **run scripts / tasks 

    npm run <task-name>

    //in package json 

        {
        "scripts": {
            "start-dev": "node lib/server-development",
            "start": "node lib/server-production"
        }
    }

    ** the package.json is a manifest with metainformation of your project
    ** the package-lock.json is a file is to keep track of the exact version of 
    every package that is

    **show the version of the current packages 
    npm list 

    **unistall a package 

    npm uninstall -g <package-name>


# Launch node app 

    **app.js being the index file of your project
    node app.js 

    **Add to you index file a shebang 

        #!/usr/bin/env node
        // your code

    **Add permisions 

        chmod u+x app.js


# Enable app auto restart 

    npm i -g nodemon 
    
    **or

    npm i --save-dev nodemon

# Run your application with autorestart (for development only) 

    nodemon app.js


# Start basic http server 

    const express = require('express');
    const app = express();

    app.get('/', (req, res) => {
    res.send('Hi!');
    });

    app.listen(3000, () => console.log('Server ready'));


    ***Express is a framework that uses the http 
    module under the hood, app.listen() returns 
    an instance of http***


# How to stop a node server (programatically).

    **Usually when node runs in the console it can be stoped 
    by ctrl + c but if it run in a remote system we must have a way to stop 
    it programatically...

    ...for that we have signals.

    ***Signals are a POSIX intercommunication system: 
    a notification sent to a process in order to notify 
    it of an event that occurred.

        const express = require('express');
        const app = express();

        app.get('/', (req, res) => {
        res.send('Hi!');
        });
        const server = app.listen(3000, () => console.log('Server ready'));

        process.on('SIGTERM', () => {
        server.close(() => {
            console.log('Process terminated');
        });
        });

    We have to options :
        - SIGKILL : SIGKILL is the signal that tells a process to 
        immediately terminate, and would ideally act like process.exit().

        - SIGTERM : SIGTERM is the signal that tells a process to gracefully 
        terminate. It is the signal that's sent from process managers like upstart 
        or supervisord and many others.

    You can send this signal from inside the program, in another function:
        
        process.kill(process.pid, 'SIGTERM');

        Or from another Node.js running program, or any other app running 
        in your system that knows the PID of the process you want to 
        terminate.


# Reading Environment variables 

    **install the dotenv  pacakage

        npm install dotenv --save
    
    **create your .env file 
    **fill the file

    example : 

    ** .env file

    USER_ID="239482"
    USER_KEY="foobar"
    NODE_ENV="development"

    **in your server sart file app.js 

    require('dotenv').config();
    process.env.USER_ID; // "239482"
    process.env.USER_KEY; // "foobar"
    process.env.NODE_ENV; // "development"


# Nodejs import/export system 


    **importing node modules
    **to import the functionality exposed in the car.js file that 
    resides in the current file folder.

    //index.js
    const {car} = require('./car');
    

    //car.js 
    const car = {
    brand: 'Ford',
    model: 'Fiesta',
    };

    module.exports = car;


    **If you have seleveral items in a module you
    can always add them to the exports 
    as object 


    //car.js 

    const car = {
    brand: 'Ford',
    model: 'Fiesta',
    };

    const car2={
    brand: 'Ford',
    model: 'Fiesta',
    }

    exports.car=car
    exports.car2=car2 

    **or
    module exports={
        car:car,
        car2:car2,
    }

    //index.js 

    const {car} = require('./car');
    const {car2} = require('./car');


# JAVASCRITP TIMERS
 
    setTimeout(() => {
    // runs after 2 seconds
    }, 2000);

    setTimeout(() => {
    // runs after 50 milliseconds
    }, 50);

# READING FILES 

    const fs = require('fs');

    fs.readFile('/file.json', (err, data) => {
    if (err) {
        // handle error
        console.log(err);
        return;
    }

# SENDING HTTP REQUEST

    const xhr = new XMLHttpRequest();
    xhr.onreadystatechange = () => {
    if (xhr.readyState === 4) {
        xhr.status === 200 ? console.log(xhr.responseText) : console.error('error');
    }
    };
    xhr.open('GET', 'https://yoursite.com');
    xhr.send();


# Promises 

    **A promise is commonly defined as a proxy for a value 
    that will eventually become available.
    **Once a promise has been called, it will start in a pending state.
    **Every promise starts with a promise constructor 
    **async / await uses primises in the back 

    const p = new Promise((resolve, reject) => {
        if some_condition{
            resolver(done) //task finished
        }else {
            reject(wait) //pending task not finished
        }
    });

    example  reading a file :

        const getFile = fileName => {
            return new Promise((resolve, reject) => {
                    fs.readFile(fileName, (err, data) => {
                        if (err) {
                            reject(err); // calling `reject` will cause the promise to fail with or without the error passed as an argument
                            return; // and we don't want to go any further
                        }
                    resolve(data);
                });
             });
        };


    **function that launched the primise

        getFile('/etc/passwd')
        .then(data => console.log(data)) //then is used for the resolve case
        .catch(err => console.error(err)); // catch for the reject case


# MODERN ASYCN AWAIT 

    **primses have a lot of bioler plating and thats why
    async / await was introduced.

    async function do_something(){

    }

    result = await do_something()


    **or 

    const aFunction = async () => {
        return 'test';
    };

    aFunction().then(alert);

    **or 
    await aFunction(alert)


# EVENT  EMITER

    **Allows to create/emit gloval events or signals
    accross the app that can be used to build logic 

    example : 

    const EventEmitter = require('events');
    const eventEmitter = new EventEmitter();

    eventEmitter.emit('start'); // an emiter 
    eventEmitter.emit('start', 1, 100); //multiple aguments emiter 

    eventEmitter.on('start', () => { //an event receiver
    console.log('started');
    });

    eventEmitter.on('start', (start, end) => { //multiple aguments receiver 
    console.log(`started from ${start} to ${end}`);
    });


-------------------------------------------------------

-------------------------------------------------------


# CREATE AND HTTP SERVER 


    const express = require('express');
    const app = express();
    app.use(express.urlencoded({ //enable encoding
        extended: true,
        })
    );
    app.use(express.json()); //enable the use of json


    app.get('/', (req, res) => {
        res.send('Hi!');
    });

    app.post('/todos', (req, res) => {
        console.log(req.body.some_json_data);
    });

    app.listen(3000, () => console.log('Server ready'));


# SEND HTTP A GET REQUEST 

    ** full url = https://whatever.com/todos
    ** host name = whatever.com
    ** path =/todos

    const https = require('https');

    const options = {
    hostname: 'example.com',
    port: 443,
    path: '/todos',
    method: 'GET',
    };

    const req = https.request(options, res => {
    console.log(`statusCode: ${res.statusCode}`);

    res.on('data', d => {
        process.stdout.write(d);
    });
    });

    req.on('error', error => {
    console.error(error);
    });

    req.end();


# SEND A POST / PUT /DELETE REQUEST 

    const https = require('https');

    const data = JSON.stringify({
    todo: 'Buy the milk',
    });

    const options = {
    hostname: 'whatever.com',
    port: 443,
    path: '/todos',
    method: 'POST',
    headers: {
        'Content-Type': 'application/json',
        'Content-Length': data.length,
    },
    };

    const req = https.request(options, res => {
    console.log(`statusCode: ${res.statusCode}`);

    res.on('data', d => {
        process.stdout.write(d);
    });
    });

    req.on('error', error => {
    console.error(error);
    });

    req.write(data);
    req.end();


# READING FILES 

    const fs = require('fs/promises');
    
    async function example() {
        let filehandle;
        try {
            filehandle = await fs.open('/Users/joe/test.txt', 'r');
            console.log(filehandle.fd);
            console.log(await filehandle.readFile({ encoding: 'utf8' }));
        } finally {
            await filehandle.close();
        }
    }

    example();

    **filehandle is a file descriptor that can interact with
    the open file 


# READING FILE ASYNC 


    const fs = require('fs');
    const util = require('util');

    async function example() {
    const open = util.promisify(fs.open);
    const fd = await open('/Users/joe/test.txt', 'r');
    }

    example();


# INTERATING WITH FILES 

    const path = require('path');
    const notes = '/users/joe/notes.txt';

    path.dirname(notes); // /users/joe
    path.basename(notes); // notes.txt
    path.extname(notes); // .txt

    const name = 'joe';
    path.join('/', 'users', name, 'notes.txt'); // '/users/joe/notes.txt'

# WRITE FILE 

    const fs = require('fs/promises');

    async function example() {
    try {
        const content = 'Some content!';
        await fs.writeFile('/Users/joe/test.txt', content);
    } catch (err) {
        console.log(err);
    }
    }
    example();

# APPEND TO A FILE 

    const fs = require('fs/promises');

    async function example() {
    try {
        const content = 'Some content!';
        await fs.appendFile('/Users/joe/test.txt', content);
    } catch (err) {
        console.log(err);
    }
    }
    example();


# NODE JS BUFFERS 

    **Buffers in Node js are fix size array that deal with
    binary data , each item in a buffer array is 1 byte of data

    example :

        const byf_string = Buffer.from("Hey")

        **The result of this will be an
        array with each character of the string in ACII 

            console.log(buf[0]); // 72
            console.log(buf[1]); // 101
            console.log(buf[2]); // 121

        **Use console.log(buf.toString()); to get back the string data 

        **Create a buffer and write data in it 

        const buf = Buffer.alloc(4);
        buf.write('Hey!');

        buf[1] = 111; // o in UTF-8 //change the data 

        console.log(buf.toString()); // Hoy! 


    **You also just can initialize a buffer allocating
    a fix amount of memory 

    example

        const buf = Buffer.alloc(1024); //safe allocation
        **allocates 1KB 

        const buf = Buffer.allocUnsafe(1024); //unsafe allocation 
        **faster and unsafer than alloc
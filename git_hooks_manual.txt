# WHAT ARE GIT HOOKS

Git hooks are scripts that Git executes before or after 
events such as: commit, push, and receive. Git hooks are a 
built-in feature - no need to download anything. Git hooks are run locally.

These hook scripts are only limited by a developer's imagination. Some example hook scripts include:

pre-commit: Check the commit message for spelling errors.
pre-receive: Enforce project coding standards.
post-commit: Email/SMS team members of a new commit.
post-receive: Push the code to production


# LOCATE GIT HOOKS 

    - Git hooks scripts are located by default in the folder :

        .git/hooks

# CREATE A HOOK 

    - The process is simple replace / add or edit any of the .sample files in 
    this directory

    - All git-hooks need to be executables --> #! /bin/bash  or #! /bin/sh
    - The shebang line int the line 1 of any file defines the 
    file as executable (#! /bin/bash)

    - To define for instance a python file as an executable add the line:
    #!/usr/bin/env python to the .py file

    - Git hooks may require execution permissions --> chmod +x file_name

    Example :

        - create a new file called check-for-doc-repo.sample
        ** The goal of this file will be to check if the current repository
        with exists in remote 
        ** bash will be used as languaje for this example

        ** in check-for-doc-repo.sample

        #! /bin/bash

        repo=$(https://github.com/duftcola-dev/doc)
        ls_command=$(git ls-remote --exit-code)

        if [ git commit ]then 

            result=$(ls_command repo)
        
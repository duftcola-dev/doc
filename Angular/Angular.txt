




1.0 # INSTALLATION 

    - requires nodejs to be installed 
    - npm install -g @angular/cli 
    
    1.1 # CREATE AN APP 

        ng new my-app

    1.2 # LAUNCH YOUR APP 

        cd my-app
        ng serve --open
    
    1.3 # ADD UNITTEST FOLDER   (OPTIONAL)

        ng e2e my-app


2.0 # CORE CONCEPTS 

    2.1 # BUILDING BLOCKS 

        ** Angular building blocks are:

            - Components 
            - Routes 
            - Directives 
            - Services 
            - Modules

    2.2 # COMPONENTS

        A component is made of :
    
            - templateUrl : links the component with its HTML view
            - styleUrls : links view with its style
            - class : contains the logic of the component

        example : 

            import { Component } from '@angular/core';

            @Component({
            selector: 'app-root',
            templateUrl: './app.component.html',
            styleUrls: ['./app.component.css']
            })
            export class AppComponent {
            title = 'Hello World';
            }

        ** Notice Component is a decorator from the @angular/core
        ** Components use the notation : 

            component_name.compoments.ts

    2.3 # MODULES 

        **Modules allow the agrupation of components
        **Module use the notation:

            module_name.module.ts
        
        **Every module is composed by the following fields :

            delcarations: Contains components
            imports: Contain other modules 
            providers: ? 
            bootstrap: It is the root component the application launches ?? 
            exports: Contains the compoments whose template(html) we want
                     to make available for other modules

        example:

            
        


    2.3 # SERVICES 

        **services are the part in Angular that handles the logic 

        Component ---> button ----> service  


    2.4 # DIRECTIVES 

        ** Directives are smaller componensts that
        create , update or alter HTML 

        - Componets directives 
        - Structure directives 
        - Attribute directives 

    2.5 # ROUTES 

        **Determines what html is rendered.

    
    2.6 # MODULES 

        ENCASES
            - Components 
            - Services 
            - Directives 
            - Routes 

            ...etc
        

3.0 # PROJECT FILES 

    ** notice typescritp allows .json to inherit from other json 
    files by using  

         "extends": "./tsconfig.json",

    tsconfig.json: Tells how to translate from ts to js 
    tsconfig.spect.json: file related to unit test configuration 
    tsconfig.app.json: main app configuration file 

    README.md : project documentation file.

    package.json : Contains scripts and the insalled deppendecies.

    karma.conf.js : (watch advanced angular) 

    angular.json : Aungular configuration files and assets loading

    .editorconfig : contains rules for ts files. 
    .browserslistrc : Contains rules on how to run/display in x certain browsers.


4.0 # ANATOMY OF A COMPONENT 

    **in app/src/ we have the first default component created by
    the cli 

    - app.component.css : contains the style 
    - app.component.html : contains the view 
    - app.component.spect : contains test created by the cli 
    - app.module.ts : is the root class of the application and contains 
                        the modules of our application in the decorator @NgModule
    - assets/ : contains static files 
    - environments : contains the the prod , dev variables. 
    - index.html : main page of the spa 
    - main.ts : (do not touch this file) loads invironment variables.
    - polifills : allows compatibility with other browsers 
    - style.css : global css style 
    - test.ts: test configuration

4.1 # CREATING COMPONENTS WITH THE CLI

    ** By default angular already creates the compononents
    inside src/app

    ng generate component .component_name 

    ** short version 

    ng g c component_name 

    example: 

        ng g c listado  ---> will generate ListadoComponent

5.0 # ANATOMY OF A MODULE

    ** A module is an agrupation of components   
    ** A module usually has the following fields

    @NgModule({
    declarations: [
                    ** Contains other components
    ],
    imports: [
        CommonModule,   ** Contains other modules. Ususally angular modules.
        FormsModule
    ],
    exports:[
        MainPageComponent ** Makes a compoment visible for other components
    ],
    providers:[
        ClientsService  ** Services go here. 
    ] 

    5.1 # GENERATE A MODULE 

        ng generate module module_name

        or 

        ng g m module_name
 
6.0 WORKFLOW OF AN AGULAR APPLICATION 

    ** Components are defined inside a module 
    ** Each component has associated a :
        - html 
        - css 
        - .compoment.ts ** for hold variables and logic 

    ** We have the component person :

    HYML - person.component.html/

        <ul>
            <li *ngFor="let person of persons;let i =index">
                <span>{{cliente.id}} {{cliente.nombre}} {{cliente.type}}</span>
            </li>
        </ul>

                ** {{}} is used to display information or values of variables

    TS LOGIC - person.compoment.ts/

    ** In the logic of the componenst
    we only have a getter that calls the person variable from a service.
    Getter methods behave in a very similar to varaibles
    
    export class ClienteComponent{
        
    constructor(private personService:PersonService){} ** services are initialized in the constructor
                                                        ** that makes them visible for the whole class
    get persons(){                                      ** This is the same getter the service has
        return this.personService.persons;              ** This is the persons we see in the html
    }

---------------------------------------------------------------------------------------------------------------


    ** We have another compoment called:

    HYML - add_person.component.html/

        <form (ngSubmit)="Add()">
            <input type="text" 
            [placeholder]="person.name"
            name="nombre"
            [(ngModel)]="person.name">

            <input type="text" 
            [placeholder]="person.type"
            name="type"
            [(ngModel)]="person.type">

            <button type="submit">Add</button>
        </form>

            ** (mgSubmit) is used for events triggered by forms
            ** Add() is a method in the file add_person.component.html/
            ** [] is used to link variables in .ts files to .html files 
            ** () is used to link variables in .html files to .ts files 
            ** [()] is a 2 way linking . From .ts to .html and from .html to .ts 

    TS LOGIC - add_person.compoment.ts

    export class AgregarComponent{

    // two-way-databinding using [(ngModel)]
    @Input("person") person:Person={
        name:"",
        type:""
    }

    constructor(private person_service:PersonService ){}       ** Initialize the service

    Add(){                                                      ** This Add method is actually calling the add method in the service
        this.person_service.add(this.person);              ** We can see we are actually calling and updating the data in the service
        this.person={id:0,nombre:"",type:""}                ** Reset the displayed data in the html
 
-----------------------------------------------------------------------------------------------------------------------------------


    **Finally we create a service that handles all the logic 

    ** In services/person.service.ts/

        @Injectable()
        export class PersonService{

            person:Person={         **The person.name we see in the html comes from here
                name:"",
                type:""
            }
        
        // Displayed in the ng form
        private _person:Person[]=[ ** the array seen at person.component.html/ comes from here though this is private
            {name:"Robin",type:"S"},       it must be sent using a get method
            {name:"Adam",type:"A++"},
            {name:"Vaush",type:"A++"},
        ]
        
        get persons():Cliente[]{        ** the array is called from this get method. 
        return [...this.__clientes];    ** get methods work like variables.
        }
        constructor(){}

        Add(new_person:Person){                    ** The method that adds new person is here 
            new_person.id=this._person.length+1;
            this._person.push(new_person);
        }

    
7.0 # SERVICES 

    ** Services handle most of the logic in an agular application.
    ** They are ususally stored in the folder services/
    ** They are characterized by using the decorator @Injectable()


        @Injectable()
        export class ClientsService{
            cliente:Cliente={
                id:0,
                nombre:"",
                type:""
            }
            
            // Displayed in the ng form
            private __clientes:Cliente[]=[
            {id:1,nombre:"Robin",type:"S"},
            {id:2,nombre:"Adam",type:"A++"},
            {id:3,nombre:"Vaush",type:"A++"},
            ]
            
            get clientes():Cliente[]{
            return [...this.__clientes];
            }
            constructor(){}

            agregar(new_client:Cliente){
            new_client.id=this.__clientes.length+1;
            this.__clientes.push(new_client);
            }

        }
#Django installation  :
    # Create a virtual environment 

    pip install Django==4.0.2

    # make sure django can be seen by python by activating the python terminal
    and then : 

    import django ; print(django.get_version())

    or in terminal

    python -m django --version


#create a django project

    django-admin startproject mysite

    ** a project folder/container is created .
    ** this is project , not a app
    ** a django project can contain many apps
    ** every django project contains at least one app running.
    ** in the project manage.py is a CLI tha can be used to manage your project
    ** /mysite is the actual directory where your app runs

    ** mysite/settings.py: Settings/configuration for this Django project.
    ** mysite/urls.py: The URL declarations for this Django project; a “table of contents” of your Django-powered site.
    ** mysite/asgi.py: An entry-point for ASGI-compatible web servers to serve your project.
    ** mysite/wsgi.py: An entry-point for WSGI-compatible web servers to serve your project.



# in order to create an app inside a django project run  :

    python manage.py startapp <app_name>
    
    example : python manage.py startapp meetups_app

    ** /meetups_app/views.py
    ** inside the created app meetups_app create the file views: 
    ** views.py : contain the functions that manage the logic behind each endpoint of the created app
    ** inside views.py

    from django.shortcuts import render
    from django.http import HttpResponse
    # Create your views here.

    def index(request): #this is a function that will handle certain logic
        return HttpResponse("hello world")

    ** /meetups_app/urls.py
    ** this file will link the enpoints of your app to the logic in the functions in views.py

    from django.urls import path
    from . import views
    urlpatterns = [
        path("meetups/",views.index)  # our-domain.com/meetups
    ]


    urls.py------>views.py

    ** register your app inside the django project
    ** /mysite/settings

    INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'meetups_app'   <------------------ add your new app here
    ]


    ** finally connect the url of your app to the root url of the project
    ** /mysite/urls
    from django.contrib import admin
    from django.urls import path, include 

    urlpatterns = [
    path('admin/', admin.site.urls),
    path('',include('meetups_app.urls')) <---/meetups_app/urls   # we are adding the urls of our app to the project
    ]

    /mysite/urls ----> meetups_app/urls--->meetups_app/views


# creating templates 

** templates allows us to create html templates using the jinja2 engine in order to retun html HttpResponse
** create a templates folder in the meetups app 
** /meetups_app/templates
** inside template create a folder with your app app_name

    /meetups_app/templates/meetups_app

** inside /meetups_app/templates/meetups_app add your first template file index.html

** now include your template in your views.py file

    from django.shortcuts import render
    from django.http import HttpResponse
    # Create your views here.

    def index(request):
        return render(request, 'meetups_app/index.html') <----notice the path is relative from the folder templates

# adding javascript / css to to your templates
** in order to inlcude this type of content in your templates it is required "static content"
** create a static folder in you meetups_app:

    /meetups_app/static/meetups_app

    ** add subfolders for scripts and styles

    /meetups_app/static/meetups_app/styles
    /meetups_app/static/meetups_app/scripts

** reference your html templates to your static style files

example : 

        {% load static %}   <----  this tells django that static content will be used
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <link rel="stylesheet" href ="{% static 'meetups_app/styles/base.css' %}"> <---- link static css file
        <title>meetups_app</title>
    </head>
    <body>
        <hi>Meetups app</hi>
        <p>HELLO WORLD</p>
    </body>
    </html>

    *** YOU MUST RESTART THE SERVERS WHEN USING STATIC FILES IN ORDER TO SEE THE CHANGES

# passing data to templates
** meetups_app/views

    def index(request):
        data = [
            {"title" : "A  first meetup app"},
            {"title" : "A second meetup app"}
        ]
        return render(request, 'meetups_app/index.html',{"data" : data}) <-- data will be the accessible key from the template

    ** in the html
    <h2>{{ data.0.title  }}</h2>  <--- this outputs  : "A  first meetup app"

# conditions and loops in templates :

        <hi>Meetups app</hi>
    <p>HELLO WORLD</p>
    <p>conditions : </p>
    {%if show_meetups %}
        <h2>{{ data.0.title  }}</h2>
    {% else %}
        <h2>{{ data.1.title  }}</h2>
    {% endif %}
    <p>for loop : </p>
    {% for item in data %} 
        <p>{{item.title}}</p>
    {% endfor %}

# passing url parameters 

    **meetups_app/urls

     path("meetups/<slug:meetup_slug>",views.details) # a dynamic url-path-segment

    ****meetups_app/views

    def details(request,meetup_slug): <---- notice the meetup_slug parameter
    print(meetup_slug)
    selected_meetup = {
        "title" : "A first meetup",
        "description" : "this is some practice app",
        "slug" : "first-meet-up"
    }
    return render(request,'meetups_app/details.html',{
        "title" : selected_meetup["title"],
        "description" : selected_meetup["description"]

        })

# Dynamic link update 
# Allows django update automatically the links of the pages
# if the root link is update in urls.py . It does this by placing an unique id to the urls :

    **/meetups_app/urls
    path("meetups/<slug:meetup_slug>",views.details,name="meetup_details_page")  **name="meetup_details_page" name is an unique id  for this path

    ** if this path is modified all the links with this id also are update automatically
    ** consider it best practices

    example :

        <div class="meetup-actions">
        <a href="{% url 'meetup_details_page' %" class="btn" >More details</a>  <--- the 'url' word creates the bounding with the id
        </div>  


         {% for item in data%}
            <a href="{% url 'meetup_details_page' item.slug %" class="btn" >More details</a>
            
            ** link id + segment url meetup_slug coming from dynamic data



#Database and model creation : 

    **models are representations of tables in my sqlite that comes by default with django
    ** in order to create a model create a class in meetups_app/models :

    class meetup(models.Model):

        id = models.BigAutoField(primary_key=True)
        title  = models.CharField(max_length=200)
        slug = models.SlugField(unique=True)
        description = models.TextField(max_length=1000)

    **this class will represent a table with fields specified in the class
    ** id = models.BigAutoField(primary_key=True) defines id as an autoincrement primary key

# Create database tables from models

    **once your models have been created you can turn them into tables by executing the command:

        python manage.py makemigrations   <--- this will create a table for each model and their relations
        python manage.py migrate <-- this will add the tables to the database
       

# use the admin console

    ** you can manage certain aspects of your app with admin console by running you server and
    ** accesing the admin console form you browser:

        localhost/admin   <-- notice you cannot access initially this since you first need to create a super user

    *** to create a super user run the command : 

        python manage.py createsuperuser

    ** complete the registering process and now you can access the admin console


# manage models from admin console 

    **in order to manage your models with the admin console you models need to be registered at ehte admin.py file in 

    mysite/meetups_app/admin.py : 

        from .models import meetup
        
        admin.site.register(meetup)


# make queries to the datbase using models

    ** first import the model to your view
    ** meetups_app/views

    from .models import meetup

    data = meetup.objects <--- objects is a property inherited by the models class

    ** objects allows us to make queries

    example : 

            data = meetup.objects.all()  <--- equivalent in SLQ to SELECT * FORM MEETUP

    ** and spesific value  : 

            data = meetup.objects.get(id=some_id) <--- we search matches based on keys
            
            or

            data = meetup.objects.get(slug=some_slud_data)

            ** remember that one of the arguments in the model was id
            ** it is advisable to warp the queries wiht try-exept blocks ** 

    ** creating new entries in the database : 

        data = new Meetup(args="stuff",args2="more_stuf") <--- notice the models do not need a __init__ method to be initilyzed
        data.save()


    **deleting objects : 

        meetup.delete() <---returns the deleted objects

    ** delete with filters : 

        result = meetup.objects.get(id=12)
        result.delete()

    ** delete all :

        meetup.objects.all().delete()
    
# run servers

    python manage.py runserver

